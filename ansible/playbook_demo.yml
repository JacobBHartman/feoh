---

- name: Feoh, a cattle manager, Ansible Playbook
  hosts: demo
  connection: local
  become: true
  environment:
    JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"

  tasks:
  - name: Update and upgrade apt packages
    apt:
      update_cache: yes
      upgrade: yes
      cache_valid_time: 86400

  - name: Install dependencies for Docker
    apt:
      name: apt-transport-https

  - name: Install dependencies for Docker
    apt:
      name: ca-certificates

  - name: Install dependencies for Docker
    apt:
      name: curl

  - name: Install dependencies for Docker
    apt:
      name: software-properties-common

  - name: Add downloaded Docker GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg

  - name: Verify fingerprint
    command: apt-key fingerprint 0EBFCD88
    register: fingerprint

  - debug: var=fingerprint.stdout_lines

  - name: Clean non-existent repository
    file:
      state: absent
      path: /etc/apt/sources.list.d/ansible-ubuntu-ansible-focal.list

  - name: Install Docker
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      state: present

  - name: Install Docker
    apt:
      update_cache: yes
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io

  - name: Install docker-compose
    get_url:
      url: "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64"
      dest: /usr/local/bin/docker-compose

  - name: Ensure docker-compose is executable
    file:
      path: /usr/local/bin/docker-compose
      mode: "+x"


  - name: Download Jenkins key
    apt_key:
      url: https://pkg.jenkins.io/debian-stable/jenkins.io.key

  - name: Add Debian Jenkins binary to repo list
    lineinfile:
      path: /etc/apt/sources.list.d/jenkins.list
      line: 'deb https://pkg.jenkins.io/debian-stable binary/'
      create: yes

  - name: Separte update cache
    apt:
      update_cache: yes

  - name: Install Java
    apt:
      name:
        - openjdk-8-jdk

  - name: Install Jenkins
    apt:
      name:    
        - jenkins

  - name: Add in Jenkins ARG that foregoes setup wizard
    lineinfile:
      path: /etc/default/jenkins
      regex: '^JAVA_ARGS='
      line: JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"

  - name: Make sure Jenkins is started so we can grab cli
    service:
      name: jenkins
      state: started

  - name: Wait for thiry seconds so that Jenkins has properly started
    wait_for:
      timeout: 40
    delegate_to: localhost

  - name: Grab Jenkins admin password
    command: cat /var/lib/jenkins/secrets/initialAdminPassword
    register: admin_password

  - name: Install Jenkins CLI jar file
    get_url:
      url: "http://localhost:8080/jnlpJars/jenkins-cli.jar"
      dest: /usr/local/bin/jenkins-cli.jar

  - name: Copy file that lists Jenkins plugins
    copy:
      src: ~/feoh/ansible/jenkins/plugins.txt
      dest: /tmp/plugins.txt

  - name: Copy script that installs  Jenkins plugins
    copy:
      src: ~/feoh/ansible/jenkins/install-plugins.sh
      dest: /tmp/install-plugins.sh
      mode: u+x

  - name: Run script that installs Jenkins plugins
    script: /tmp/install-plugins.sh

  - name: Create Jenkins Job directory
    file:
      path: /var/lib/jenkins/jobs/0-deploy-all
      state: directory
      mode: '0755'

  - name: Recurse ownership of Jenkins job directory
    file:
      path: /var/lib/jenkins/jobs
      state: directory
      recurse: yes
      owner: jenkins
      group: jenkins

  - name: Configure Jenkins
    copy:
      src: ~/feoh/ansible/jenkins/config.xml
      dest: /var/lib/jenkins/jobs/0-deploy-all/config.xml
      owner: jenkins
      group: jenkins
      mode: '0644'

  - name: Add Jenkins to Docker group
    user:
      name: jenkins
      append: yes
      groups: docker

  - name: Start Jenkins
    service:
      name: jenkins
      state: restarted

        #- name: Start Jenkins build
        #command: java -jar /usr/local/bin/jenkins-cli.jar -s http://localhost:8080/ -auth admin:$ADMIN_PASSWORD build 0-deploy-all
        #environment:
        #ADMIN_PASSWORD: '{{ admin_password }}'

  - name: Remove useless packages from the cache
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes
